import { Duplex } from 'stream';

export = Monkey;
declare function Monkey(): void;
declare namespace Monkey {
    class Client {
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
        commandQueue: any;
        parser: any;
        stream: any;
        addListener(type: any, listener: any): any;
        connect(stream: any): any;
        done(callback: any): any;
        emit(type: any, ...args: any[]): any;
        end(): any;
        eventNames(): any;
        flipClose(callback: any): any;
        flipOpen(callback: any): any;
        get(name: any, callback: any): any;
        getAmCurrentAction(callback: any): any;
        getAmCurrentCategories(callback: any): any;
        getAmCurrentCompClass(callback: any): any;
        getAmCurrentCompPackage(callback: any): any;
        getAmCurrentData(callback: any): any;
        getAmCurrentPackage(callback: any): any;
        getBuildBoard(callback: any): any;
        getBuildBrand(callback: any): any;
        getBuildCpuAbi(callback: any): any;
        getBuildDevice(callback: any): any;
        getBuildDisplay(callback: any): any;
        getBuildFingerprint(callback: any): any;
        getBuildHost(callback: any): any;
        getBuildId(callback: any): any;
        getBuildManufacturer(callback: any): any;
        getBuildModel(callback: any): any;
        getBuildProduct(callback: any): any;
        getBuildTags(callback: any): any;
        getBuildType(callback: any): any;
        getBuildUser(callback: any): any;
        getBuildVersionCodename(callback: any): any;
        getBuildVersionIncremental(callback: any): any;
        getBuildVersionRelease(callback: any): any;
        getBuildVersionSdk(callback: any): any;
        getClockMillis(callback: any): any;
        getClockRealtime(callback: any): any;
        getClockUptime(callback: any): any;
        getDisplayDensity(callback: any): any;
        getDisplayHeight(callback: any): any;
        getDisplayWidth(callback: any): any;
        getMaxListeners(): any;
        keyDown(keyCode: any, callback: any): any;
        keyUp(keyCode: any, callback: any): any;
        list(callback: any): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        multi(): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        press(keyCode: any, callback: any): any;
        quit(callback: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        send(commands: any, callback: any): any;
        setMaxListeners(n: any): any;
        sleep(ms: any, callback: any): any;
        tap(x: any, y: any, callback: any): any;
        touchDown(x: any, y: any, callback: any): any;
        touchMove(x: any, y: any, callback: any): any;
        touchUp(x: any, y: any, callback: any): any;
        trackball(dx: any, dy: any, callback: any): any;
        type(str: any, callback: any): any;
        wake(callback: any): any;
    }
    namespace Client {
        class EventEmitter {
            // Circular reference from index.Client.EventEmitter
            static EventEmitter: any;
            static defaultMaxListeners: any;
            static init(): void;
            static listenerCount(emitter: any, type: any): any;
            static usingDomains: boolean;
            addListener(type: any, listener: any): any;
            emit(type: any, ...args: any[]): any;
            eventNames(): any;
            getMaxListeners(): any;
            listenerCount(type: any): any;
            listeners(type: any): any;
            on(type: any, listener: any): any;
            once(type: any, listener: any): any;
            prependListener(type: any, listener: any): any;
            prependOnceListener(type: any, listener: any): any;
            removeAllListeners(type: any, ...args: any[]): any;
            removeListener(type: any, listener: any): any;
            setMaxListeners(n: any): any;
        }
    }
    class Connection {
        static defaultMaxListeners: number;
        static init(): void;
        static listenerCount(emitter: any, type: any): any;
        static usingDomains: boolean;
        constructor(...args: any[]);
        addListener(type: any, listener: any): any;
        connect(options: any): any;
        done(callback: any): any;
        emit(type: any, ...args: any[]): any;
        end(): any;
        eventNames(): any;
        flipClose(callback: any): any;
        flipOpen(callback: any): any;
        get(name: any, callback: any): any;
        getAmCurrentAction(callback: any): any;
        getAmCurrentCategories(callback: any): any;
        getAmCurrentCompClass(callback: any): any;
        getAmCurrentCompPackage(callback: any): any;
        getAmCurrentData(callback: any): any;
        getAmCurrentPackage(callback: any): any;
        getBuildBoard(callback: any): any;
        getBuildBrand(callback: any): any;
        getBuildCpuAbi(callback: any): any;
        getBuildDevice(callback: any): any;
        getBuildDisplay(callback: any): any;
        getBuildFingerprint(callback: any): any;
        getBuildHost(callback: any): any;
        getBuildId(callback: any): any;
        getBuildManufacturer(callback: any): any;
        getBuildModel(callback: any): any;
        getBuildProduct(callback: any): any;
        getBuildTags(callback: any): any;
        getBuildType(callback: any): any;
        getBuildUser(callback: any): any;
        getBuildVersionCodename(callback: any): any;
        getBuildVersionIncremental(callback: any): any;
        getBuildVersionRelease(callback: any): any;
        getBuildVersionSdk(callback: any): any;
        getClockMillis(callback: any): any;
        getClockRealtime(callback: any): any;
        getClockUptime(callback: any): any;
        getDisplayDensity(callback: any): any;
        getDisplayHeight(callback: any): any;
        getDisplayWidth(callback: any): any;
        getMaxListeners(): any;
        keyDown(keyCode: any, callback: any): any;
        keyUp(keyCode: any, callback: any): any;
        list(callback: any): any;
        listenerCount(type: any): any;
        listeners(type: any): any;
        multi(): any;
        on(type: any, listener: any): any;
        once(type: any, listener: any): any;
        prependListener(type: any, listener: any): any;
        prependOnceListener(type: any, listener: any): any;
        press(keyCode: any, callback: any): any;
        quit(callback: any): any;
        removeAllListeners(type: any, ...args: any[]): any;
        removeListener(type: any, listener: any): any;
        send(commands: any, callback: any): any;
        setMaxListeners(n: any): any;
        sleep(ms: any, callback: any): any;
        tap(x: any, y: any, callback: any): any;
        touchDown(x: any, y: any, callback: any): any;
        touchMove(x: any, y: any, callback: any): any;
        touchUp(x: any, y: any, callback: any): any;
        trackball(dx: any, dy: any, callback: any): any;
        type(str: any, callback: any): any;
        wake(callback: any): any;
    }
    namespace Connection {
        class EventEmitter {
            // Circular reference from index.Connection.EventEmitter
            static EventEmitter: any;
            static defaultMaxListeners: any;
            static init(): void;
            static listenerCount(emitter: any, type: any): any;
            static usingDomains: boolean;
            addListener(type: any, listener: any): any;
            emit(type: any, ...args: any[]): any;
            eventNames(): any;
            getMaxListeners(): any;
            listenerCount(type: any): any;
            listeners(type: any): any;
            on(type: any, listener: any): any;
            once(type: any, listener: any): any;
            prependListener(type: any, listener: any): any;
            prependOnceListener(type: any, listener: any): any;
            removeAllListeners(type: any, ...args: any[]): any;
            removeListener(type: any, listener: any): any;
            setMaxListeners(n: any): any;
        }
    }
    function connect(options: any): any;
    function connectStream(stream: Duplex): Client;
}
